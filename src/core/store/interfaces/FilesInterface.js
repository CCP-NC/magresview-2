/**
 * MagresView 2.0
 *
 * A web interface to visualize and interact with computed NMR data in the Magres
 * file format.
 *
 * Author: Simone Sturniolo
 *
 * Copyright 2022 Science and Technology Facilities Council
 * This software is distributed under the terms of the MIT License
 * Please refer to the file LICENSE for the text of the license
 * 
 */

import { shallowEqual, useSelector, useDispatch } from 'react-redux';

import { makeSelector, BaseInterface, getSel, getNMRData } from '../utils';
import { tableRow, eulerFromRotation, dipolarCoupling, jCoupling } from '../../../utils';

const initialFilesState = {
    files_seltype: 'ms'
};

class FilesInterface extends BaseInterface {

    get fileType() {
        return this.state.files_seltype;
    }

    set fileType(v) {
        this.dispatch({
            type: 'set',
            key: 'files_seltype',
            value: v
        });
    }

    get fileName() {
        let app = this.state.app_viewer;
        let mname = app.modelName;
        let type = this.state.files_seltype;

        if (mname) {
            return `mvtable_${mname}_${type}.txt`;
        }
        else {
            return 'N/A';
        }
    }

    get fileValid() {
        // Can we generate a file with these parameters?
        let app = this.state.app_viewer;
        if (!app || !app.model)
            return false;

        switch(this.state.files_seltype) {
            case 'ms':
                return this.hasMSData;
            case 'efg':
                return this.hasEFGData;
            case 'isc':
                return this.hasISCData;
            default:
                break;
        }

        return true;
    }

    get hasMSData() {
        let app = this.state.app_viewer;
        return (app && app.model && (app.model.hasArray('ms')));            
    }

    get hasEFGData() {
        let app = this.state.app_viewer;
        return (app && app.model && (app.model.hasArray('efg')));            
    }

    get hasISCData() {
        let app = this.state.app_viewer;
        return (app && app.model && (app.model.hasArray('isc')));        
    }

    generateFile() {

        let contents = '';

        // What are the atoms?
        const app = this.state.app_viewer;
        let view = null;

        if (app && app.model) {
            view = getSel(app);
        }

        if (!view) {
            return null;
        }

        switch(this.state.files_seltype) {
            case 'ms':
                contents = this._msMakeTable(view);
                break;
            case 'efg':
                contents = this._efgMakeTable(view);
                break;
            case 'dip':
                contents = this._dipMakeTable(view);
                break;
            case 'isc':
                contents = this._iscMakeTable(view);
                break;
            default:
                return null;
        }

        return contents;
    }

    // Table generators
    _msMakeTable(view) {

        const tabW = 20;
        const prec = 5;
        const conv = this.state.eul_convention;

        let table = 'MS Table generated by MagresView 2\n';
        table += `Euler angles convention: ${conv}\n\n`;

        // Header
        table += tableRow(['Label', 'Element', 'Index', 'Isotropy (ppm)', 
                           'Anisotropy (ppm)', 'Asymmetry', 
                           'alpha', 'beta', 'gamma'], tabW);

        // Get the NMR data
        const iso = getNMRData(view, 'iso', 'ms')[1];
        const aniso = getNMRData(view, 'aniso', 'ms')[1];
        const asymm = getNMRData(view, 'asymm', 'ms')[1];

        // Euler angles
        const euler = view.atoms.map((a) => {
            const T = a.getArrayValue('ms');
            return eulerFromRotation(T.haeberlen_eigenvectors, conv).map((x) => (x*180.0/Math.PI));
        });

        view.atoms.forEach((a, i) => {
            table += tableRow([
                a.crystLabel,
                a.isotope + a.element,
                a.index,
                iso[i],
                aniso[i],
                asymm[i],
                euler[i][0],
                euler[i][1],
                euler[i][2]
            ], tabW, prec);
        });

        return table;
    }

    _efgMakeTable(view) {

        const tabW = 20;
        const prec = 5;
        const conv = this.state.eul_convention;

        let table = 'EFG Table generated by MagresView 2\n';
        table += `Euler angles convention: ${conv}\n\n`;

        // Header
        table += tableRow(['Label', 'Element', 'Index', 'Vzz (au)', 'Anisotropy (au)', 
                           'Asymmetry', 'Q (kHz)', 
                           'alpha', 'beta', 'gamma'], tabW);

        // Get the NMR data
        const Vzz = getNMRData(view, 'e_z', 'efg')[1];
        const aniso = getNMRData(view, 'aniso', 'efg')[1];
        const asymm = getNMRData(view, 'asymm', 'efg')[1];
        const Q = getNMRData(view, 'Q', 'efg')[1];

        // Euler angles
        const euler = view.atoms.map((a) => {
            const T = a.getArrayValue('efg');
            return eulerFromRotation(T.haeberlen_eigenvectors, conv).map((x) => (x*180.0/Math.PI));
        });

        view.atoms.forEach((a, i) => {
            table += tableRow([
                a.crystLabel,
                a.isotope + a.element,
                a.index,
                Vzz[i],
                aniso[i],
                asymm[i],
                Q[i],
                euler[i][0],
                euler[i][1],
                euler[i][2]
            ], tabW, prec);
        });

        return table;
    }

    _dipMakeTable(view) {

        const tabW = 20;
        const prec = 5;

        let table = 'Dipolar coupling table generated by MagresView 2\n\n';

        // Header
        table += tableRow(['Label 1', 'Element 1', 'Index 1', 
                           'Label 2', 'Element 2', 'Index 2',
                           'D (kHz)', 'r_x (Ang)', 'r_y (Ang)', 'r_z (Ang)'], tabW);

        const atoms = view.atoms;

        atoms.forEach((a1, i) => {
            atoms.slice(i+1).forEach((a2, j) => {

                const [D, r] = dipolarCoupling(a1, a2);

                table += tableRow([
                    a1.crystLabel,
                    a1.isotope + a1.element,
                    a1.index,
                    a2.crystLabel,
                    a2.isotope + a2.element,
                    a2.index,
                    D,
                    r[0], r[1], r[2]
                ], tabW, prec);
            });
        });

        return table;
    }

    _iscMakeTable(view) {

        const tabW = 20;
        const prec = 5;

        let table = 'Dipolar coupling table generated by MagresView 2\n\n';

        // Header
        table += tableRow(['Label 1', 'Element 1', 'Index 1', 
                           'Label 2', 'Element 2', 'Index 2',
                           'J (Hz)'], tabW);

        const atoms = view.atoms;

        atoms.forEach((a1, i) => {
            atoms.slice(i+1).forEach((a2, j) => {

                const J = jCoupling(a1, a2);

                if(!J)
                    return; // No data

                table += tableRow([
                    a1.crystLabel,
                    a1.isotope + a1.element,
                    a1.index,
                    a2.crystLabel,
                    a2.isotope + a2.element,
                    a2.index,
                    J
                ], tabW, prec);
            });
        });

        return table;
    }
}

// Hook for interface
function useFilesInterface() {
    let state = useSelector(makeSelector('files', ['app_viewer', 
                                                   'app_default_displayed', 
                                                   'eul_convention']), 
                            shallowEqual);
    let dispatcher = useDispatch();

    let intf = new FilesInterface(state, dispatcher);

    return intf;
}

export default useFilesInterface;
export { initialFilesState };